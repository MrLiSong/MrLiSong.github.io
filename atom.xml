<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MrLi&#39;s 博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-10T06:22:05.260Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue开发过程中须注意的问题</title>
    <link href="http://yoursite.com/2018/12/10/vue-attention/"/>
    <id>http://yoursite.com/2018/12/10/vue-attention/</id>
    <published>2018-12-10T01:46:45.000Z</published>
    <updated>2018-12-10T06:22:05.260Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;说实话，通过使用vue，确实给开发带来了极大的便利，但是开发过程也是一个采坑的过程，下面是我在开发过程中遇到的一些问题：</p><a id="more"></a><h4 id="1-Vue-不能检测到对象属性的添加或删除"><a href="#1-Vue-不能检测到对象属性的添加或删除" class="headerlink" title="1.Vue 不能检测到对象属性的添加或删除"></a>1.Vue 不能检测到对象属性的添加或删除</h4><p>&emsp;&emsp;由于 Vue 会在初始化实例时对属性执行 getter/setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。例如：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="type">Vue</span>(&#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        a: <span class="type">1</span></span><br><span class="line"><span class="type">    </span>&#125;</span><br><span class="line">&#125;);</span><br><span class="line">vm.a;            <span class="comment">//  是响应的</span></span><br><span class="line">vm.b = <span class="number">2</span>;        <span class="comment">//  是非响应的</span></span><br></pre></td></tr></table></figure><p>可以使用vue中的Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.<span class="built_in">set</span>(vm.someObject, <span class="string">'b'</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>或者：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm<span class="selector-class">.someObject</span> = Object.assign(&#123;&#125;, this<span class="selector-class">.someObject</span>, &#123; <span class="selector-tag">b</span>: <span class="number">2</span> &#125;)</span><br></pre></td></tr></table></figure></p><h4 id="2-低版本ie浏览器不支持Promise"><a href="#2-低版本ie浏览器不支持Promise" class="headerlink" title="2.低版本ie浏览器不支持Promise"></a>2.低版本ie浏览器不支持Promise</h4><p>&emsp;&emsp;在开发过程中，很大概率会用到一些基于Promise的第三方库，由于低版本ie不支持Promise，需要引入babel-polyfill<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span><span class="keyword">babel-polyfill </span>--save</span><br></pre></td></tr></table></figure></p><p>然后在main.js中引入该库<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">important babelPolyfill <span class="keyword">from</span> <span class="string">'babel-polyfill'</span></span><br></pre></td></tr></table></figure></p><h4 id="3-后端接收不到post请求传递的参数"><a href="#3-后端接收不到post请求传递的参数" class="headerlink" title="3.后端接收不到post请求传递的参数"></a>3.后端接收不到post请求传递的参数</h4><p>&emsp;&emsp;在前后端分离的开发模式中，通常会使用axios库，如果后台不支持接收对象形式的参数，会导致后台接收不到我们传入的参数，因此需要将参数进行序列化：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> transformRequest = [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> it <span class="keyword">in</span> data) &#123;</span><br><span class="line">    ret += <span class="built_in">encodeURIComponent</span>(it) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[it]) + <span class="string">'&amp;'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;];</span><br><span class="line">axios(&#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">     url: <span class="string">''</span>,</span><br><span class="line">     transformRequest: transformRequest,</span><br><span class="line">     data: &#123;&#125;,</span><br><span class="line">     headers: &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在这里给大家推荐一个好用的ajax模块，superagent（详情请参考<a href="https://www.jianshu.com/p/98b854322260" target="_blank" rel="noopener">https://www.jianshu.com/p/98b854322260</a>）</p><h4 id="4-使用History模式，出现404错误"><a href="#4-使用History模式，出现404错误" class="headerlink" title="4.使用History模式，出现404错误"></a>4.使用History模式，出现404错误</h4><p>&emsp;&emsp;vue-router默认使用hash模式—— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。<br>&emsp;&emsp;在使用History时，URL 就像正常的 url，例如 <code>http://yoursite.com/user/id</code>，这时服务端需要增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。<br>具体配置方法请参考：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/essentials/history-mode.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;说实话，通过使用vue，确实给开发带来了极大的便利，但是开发过程也是一个采坑的过程，下面是我在开发过程中遇到的一些问题：&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>如何发布vue插件到npm</title>
    <link href="http://yoursite.com/2018/12/06/vue-plugin/"/>
    <id>http://yoursite.com/2018/12/06/vue-plugin/</id>
    <published>2018-12-06T06:27:21.000Z</published>
    <updated>2018-12-08T06:05:42.002Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近在用vue开发项目，其中的数据驱动，组件化的开发模式让我受益匪浅，有些地方会用到一些vue的插件，于是就去网上找了一些别人封装的插件，但是都不能完全满足开发需求，于是开始自己封装vue插件并参考别人的经验发布到了npm上，在此记录一下发布的步骤。</p><a id="more"></a><h4 id="1-开发插件"><a href="#1-开发插件" class="headerlink" title="1. 开发插件"></a>1. 开发插件</h4><p>&emsp;&emsp;用完整版的vue脚手架会修改许多的配置，因此我选择简易版的脚手架来进行插件开发。首先，src文件夹下创建lib文件夹，并在其中编写好自己的全局插件123（插件开发请参考<a href="https://cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="noopener">vue插件开发</a>）</p><h4 id="2-修改webpack-config-js-如下所示："><a href="#2-修改webpack-config-js-如下所示：" class="headerlink" title="2. 修改webpack.config.js,如下所示："></a>2. 修改webpack.config.js,如下所示：</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  /<span class="regexp">/ entry: './src</span><span class="regexp">/main.js',</span></span><br><span class="line"><span class="regexp">  entry: './src</span><span class="regexp">/lib/index</span>.js<span class="string">',                //  插件打包的入口文件</span></span><br><span class="line"><span class="string">  output: &#123;</span></span><br><span class="line"><span class="string">    path: path.resolve(__dirname, '</span>./dist<span class="string">'),</span></span><br><span class="line"><span class="string">    publicPath: '</span>/dist/<span class="string">',</span></span><br><span class="line"><span class="string">    // filename: '</span>build.js<span class="string">'</span></span><br><span class="line"><span class="string">    filename: '</span>vue-input-ranger.js<span class="string">',    //  打包后的js文件</span></span><br><span class="line"><span class="string">    library: '</span>InputRanger<span class="string">',</span></span><br><span class="line"><span class="string">    libraryTarget: '</span>umd<span class="string">',</span></span><br><span class="line"><span class="string">    umdNamedDefine: true</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-lib下的index-js-开发插件会新建一个index-js文件-中新增以下代码"><a href="#3-lib下的index-js-开发插件会新建一个index-js文件-中新增以下代码" class="headerlink" title="3. lib下的index.js(开发插件会新建一个index.js文件)中新增以下代码"></a>3. lib下的index.js(开发插件会新建一个index.js文件)中新增以下代码</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">    <span class="built_in">window</span>.Vue.use(paykeyboard);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-修改package-json文件，如下所示："><a href="#4-修改package-json文件，如下所示：" class="headerlink" title="4. 修改package.json文件，如下所示："></a>4. 修改package.json文件，如下所示：</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"private"</span>: <span class="literal">false</span>, <span class="string">//</span> 默认是<span class="literal">true</span> 私人的 需要改为<span class="literal">false</span> 不然发不上去</span><br><span class="line"><span class="string">"license"</span>: <span class="string">"MIT"</span>, <span class="string">//</span> 许可证</span><br><span class="line"><span class="string">"main"</span>: <span class="string">"dist/vue-pay-keyboard.js"</span>, <span class="string">//</span> 这个超级重要 决定了你 import xxx from “vue-pay-keyboard” 它默认就会去找 dist下的vue-pay-keyboard 文件</span><br><span class="line"><span class="string">"repository"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/yucccc/vue-pay-keyboard"</span>    <span class="string">//</span> 配置这个地址存放你项目在github上的位置 也尤为重要</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-将项目发布到github或者码云（国产的github）"><a href="#4-将项目发布到github或者码云（国产的github）" class="headerlink" title="4. 将项目发布到github或者码云（国产的github）"></a>4. 将项目发布到github或者码云（国产的github）</h4><h4 id="5-注册npm账户并登陆（npm-login）"><a href="#5-注册npm账户并登陆（npm-login）" class="headerlink" title="5. 注册npm账户并登陆（npm login）"></a>5. 注册npm账户并登陆（npm login）</h4><h4 id="6-发布插件（npm-publish）"><a href="#6-发布插件（npm-publish）" class="headerlink" title="6. 发布插件（npm publish）"></a>6. 发布插件（npm publish）</h4><p>注：修改 .gitignore 去掉忽略dist</p><p>其他：<br>使用命令：npm version &lt;update_type&gt;进行修改，update_type 有三个参数，<br>&emsp;&emsp;第一个是patch,第二个是minor,第三个是 major，<br>&emsp;&emsp;patch：这个是补丁的意思，补丁最合适；<br>&emsp;&emsp;minor：这个是小修小改；<br>&emsp;&emsp;major：这个是大改咯；</p><p>具体咋用：<br>&emsp;&emsp;比如我想来个1.0.1版本，注意，是最后一位修改了增1，那么命令：npm version patch    回车就可以了；<br>&emsp;&emsp;比如我想来个1.1.0版本，注意，是第二位修改了增1，那么命令：    npm version minor    回车就可以了；<br>&emsp;&emsp;比如我想来个2.0.0版本，注意，是第一位修改了增1，那么命令：    npm version major     回车就可以了；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;最近在用vue开发项目，其中的数据驱动，组件化的开发模式让我受益匪浅，有些地方会用到一些vue的插件，于是就去网上找了一些别人封装的插件，但是都不能完全满足开发需求，于是开始自己封装vue插件并参考别人的经验发布到了npm上，在此记录一下发布的步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>一些实用的js方法</title>
    <link href="http://yoursite.com/2018/12/04/userful-methods/"/>
    <id>http://yoursite.com/2018/12/04/userful-methods/</id>
    <published>2018-12-04T06:12:49.000Z</published>
    <updated>2018-12-10T01:43:47.065Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在日常开发中我们经常会用到一些小的算法，比如：转换日期格式，获取网址参数等等，下面是我整理出的一些在日常开发中经常用到的小方法。</p><a id="more"></a><p>1.获取url中的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParams</span>(<span class="params">field</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> href = <span class="built_in">window</span>.location.href;</span><br><span class="line">    <span class="keyword">var</span> arg = href.split(<span class="string">'?'</span>);</span><br><span class="line">    <span class="keyword">if</span> (arg.length === <span class="number">1</span> &amp;&amp; arg[<span class="number">0</span>] === href) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> arr = arg[<span class="number">1</span>].split(<span class="string">'&amp;'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> splitArr = arr[i].split(<span class="string">'='</span>);</span><br><span class="line">            obj[splitArr[<span class="number">0</span>]] = splitArr[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">decodeURI</span>(obj[field]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中参数为你想要得到的值得key，例如：ulr = ‘<a href="http://www.xxx.com" target="_blank" rel="noopener">www.xxx.com</a> ? id = 1’ ,  getParams(‘id’)即可得到id值</p><p>2.格式化时间</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function formatTime(<span class="built_in">date</span>)&#123;</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">year</span> = date.getFullYear()</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">month</span> = date.getMonth() + <span class="number">1</span></span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">day</span> = date.getDate()</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">hour</span> = date.getHours()</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">minute</span> = date.getMinutes()</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">second</span> = date.getSeconds()</span><br><span class="line"></span><br><span class="line">    function formatNumber(<span class="built_in">n</span>)&#123;</span><br><span class="line">          <span class="built_in">n</span> = n.toString()</span><br><span class="line">          return <span class="built_in">n</span>[<span class="number">1</span>]  ? <span class="built_in">n</span> <span class="symbol">:</span> '<span class="number">0</span>' + <span class="built_in">n</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return [<span class="built_in">year</span>, <span class="built_in">month</span>, <span class="built_in">day</span>].map(formatNumber).join('/') +' '+  [<span class="built_in">hour</span>, <span class="built_in">minute</span>, <span class="built_in">second</span>].map(formatNumber).join('<span class="symbol">:</span>')</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 3.将简单json转换为树结构的json</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transferToTree</span><span class="params">(a, idStr, pidStr, chindren)</span> &#123;</span></span><br><span class="line">    var r = [], hash = &#123;&#125;, id = idStr, pId = pidStr, children = chindren, <span class="built_in">i</span> = <span class="number">0</span>, <span class="built_in">j</span> = <span class="number">0</span>, len = a.<span class="built_in">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">i</span> &lt; len; <span class="built_in">i</span>++) &#123;</span><br><span class="line">        hash[a[<span class="built_in">i</span>][id]] = a[<span class="built_in">i</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">j</span> &lt; len; <span class="built_in">j</span>++) &#123;</span><br><span class="line">        var aVal = a[<span class="built_in">j</span>], hashVP = hash[aVal[pId]];</span><br><span class="line">        aVal.name = aVal.name + <span class="string">" : "</span> + aVal.mail;</span><br><span class="line">        <span class="keyword">if</span> (hashVP) &#123;</span><br><span class="line">            !hashVP[children] &amp;&amp; (hashVP[children] = []);</span><br><span class="line">            hashVP[children].push(aVal);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r.push(aVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;第一个参数为待转换的数据，第二个参数为子数据的id，第三个参数为子数据的pid，第四个参数为转换后子数据的字段名</p><p>&emsp;&emsp;总结：会用不是主要的，关键是要掌握其中的原理，一边根据自己的需求来进行改造，以上是在实际项目中遇到过的，在此记录下来，以后还会持续更新</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;在日常开发中我们经常会用到一些小的算法，比如：转换日期格式，获取网址参数等等，下面是我整理出的一些在日常开发中经常用到的小方法。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
</feed>
