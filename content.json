[{"title":"vue开发过程中须注意的问题","date":"2018-12-10T01:46:45.000Z","path":"2018/12/10/vue-attention/","text":"&emsp;&emsp;说实话，通过使用vue，确实给开发带来了极大的便利，但是开发过程也是一个采坑的过程，下面是我在开发过程中遇到的一些问题： 1.Vue 不能检测到对象属性的添加或删除&emsp;&emsp;由于 Vue 会在初始化实例时对属性执行 getter/setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。例如： 1234567var vm = new Vue(&#123; data() &#123; a: 1 &#125;&#125;);vm.a; // 是响应的vm.b = 2; // 是非响应的 可以使用vue中的Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上： 1Vue.set(vm.someObject, 'b', 2); 或者：1vm.someObject = Object.assign(&#123;&#125;, this.someObject, &#123; b: 2 &#125;) 2.低版本ie浏览器不支持Promise&emsp;&emsp;在开发过程中，很大概率会用到一些基于Promise的第三方库，由于低版本ie不支持Promise，需要引入babel-polyfill1npm install babel-polyfill --save 然后在main.js中引入该库1important babelPolyfill from 'babel-polyfill' 3.后端接收不到post请求传递的参数&emsp;&emsp;在前后端分离的开发模式中，通常会使用axios库，如果后台不支持接收对象形式的参数，会导致后台接收不到我们传入的参数，因此需要将参数进行序列化：1234567891011121314var transformRequest = [function (data) &#123; let ret = ''; for (let it in data) &#123; ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&amp;' &#125; return ret&#125;];axios(&#123; method: 'post', url: '', transformRequest: transformRequest, data: &#123;&#125;, headers: &#123;'Content-Type': 'application/x-www-form-urlencoded'&#125;&#125;) 在这里给大家推荐一个好用的ajax模块，superagent（详情请参考https://www.jianshu.com/p/98b854322260） 4.使用History模式，出现404错误&emsp;&emsp;vue-router默认使用hash模式—— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。&emsp;&emsp;在使用History时，URL 就像正常的 url，例如 http://yoursite.com/user/id，这时服务端需要增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。具体配置方法请参考：https://router.vuejs.org/zh/guide/essentials/history-mode.html","tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"如何发布vue插件到npm","date":"2018-12-06T06:27:21.000Z","path":"2018/12/06/vue-plugin/","text":"&emsp;&emsp;最近在用vue开发项目，其中的数据驱动，组件化的开发模式让我受益匪浅，有些地方会用到一些vue的插件，于是就去网上找了一些别人封装的插件，但是都不能完全满足开发需求，于是开始自己封装vue插件并参考别人的经验发布到了npm上，在此记录一下发布的步骤。 1. 开发插件&emsp;&emsp;用完整版的vue脚手架会修改许多的配置，因此我选择简易版的脚手架来进行插件开发。首先，src文件夹下创建lib文件夹，并在其中编写好自己的全局插件123（插件开发请参考vue插件开发） 2. 修改webpack.config.js,如下所示：12345678910111213module.exports = &#123; // entry: './src/main.js', entry: './src/lib/index.js', // 插件打包的入口文件 output: &#123; path: path.resolve(__dirname, './dist'), publicPath: '/dist/', // filename: 'build.js' filename: 'vue-input-ranger.js', // 打包后的js文件 library: 'InputRanger', libraryTarget: 'umd', umdNamedDefine: true &#125;,&#125; 3. lib下的index.js(开发插件会新建一个index.js文件)中新增以下代码123if (typeof window !== 'undefined' &amp;&amp; window.Vue) &#123; window.Vue.use(paykeyboard);&#125; 4. 修改package.json文件，如下所示：1234567\"private\": false, // 默认是true 私人的 需要改为false 不然发不上去\"license\": \"MIT\", // 许可证\"main\": \"dist/vue-pay-keyboard.js\", // 这个超级重要 决定了你 import xxx from “vue-pay-keyboard” 它默认就会去找 dist下的vue-pay-keyboard 文件\"repository\": &#123; \"type\": \"git\", \"url\": \"https://github.com/yucccc/vue-pay-keyboard\" // 配置这个地址存放你项目在github上的位置 也尤为重要&#125; 4. 将项目发布到github或者码云（国产的github）5. 注册npm账户并登陆（npm login）6. 发布插件（npm publish）注：修改 .gitignore 去掉忽略dist 其他：使用命令：npm version &lt;update_type&gt;进行修改，update_type 有三个参数，&emsp;&emsp;第一个是patch,第二个是minor,第三个是 major，&emsp;&emsp;patch：这个是补丁的意思，补丁最合适；&emsp;&emsp;minor：这个是小修小改；&emsp;&emsp;major：这个是大改咯； 具体咋用：&emsp;&emsp;比如我想来个1.0.1版本，注意，是最后一位修改了增1，那么命令：npm version patch 回车就可以了；&emsp;&emsp;比如我想来个1.1.0版本，注意，是第二位修改了增1，那么命令： npm version minor 回车就可以了；&emsp;&emsp;比如我想来个2.0.0版本，注意，是第一位修改了增1，那么命令： npm version major 回车就可以了；","tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"一些实用的js方法","date":"2018-12-04T06:12:49.000Z","path":"2018/12/04/userful-methods/","text":"&emsp;&emsp;在日常开发中我们经常会用到一些小的算法，比如：转换日期格式，获取网址参数等等，下面是我整理出的一些在日常开发中经常用到的小方法。 1.获取url中的参数 123456789101112131415function getParams(field) &#123; var href = window.location.href; var arg = href.split('?'); if (arg.length === 1 &amp;&amp; arg[0] === href) &#123; return ''; &#125; else &#123; var obj = &#123;&#125;; var arr = arg[1].split('&amp;'); for (var i = 0, len = arr.length; i &lt; len; i++) &#123; var splitArr = arr[i].split('='); obj[splitArr[0]] = splitArr[1]; &#125; return decodeURI(obj[field]); &#125;&#125; &emsp;&emsp;其中参数为你想要得到的值得key，例如：ulr = ‘www.xxx.com ? id = 1’ , getParams(‘id’)即可得到id值 2.格式化时间 123456789101112131415function formatTime(date)&#123; var year = date.getFullYear() var month = date.getMonth() + 1 var day = date.getDate() var hour = date.getHours() var minute = date.getMinutes() var second = date.getSeconds() function formatNumber(n)&#123; n = n.toString() return n[1] ? n : '0' + n &#125; return [year, month, day].map(formatNumber).join('/') +' '+ [hour, minute, second].map(formatNumber).join(':')&#125; 3.将简单json转换为树结构的json 1234567891011121314151617function transferToTree(a, idStr, pidStr, chindren) &#123; var r = [], hash = &#123;&#125;, id = idStr, pId = pidStr, children = chindren, i = 0, j = 0, len = a.length; for (; i &lt; len; i++) &#123; hash[a[i][id]] = a[i]; &#125; for (; j &lt; len; j++) &#123; var aVal = a[j], hashVP = hash[aVal[pId]]; aVal.name = aVal.name + \" : \" + aVal.mail; if (hashVP) &#123; !hashVP[children] &amp;&amp; (hashVP[children] = []); hashVP[children].push(aVal); &#125; else &#123; r.push(aVal); &#125; &#125; return r;&#125; &emsp;&emsp;第一个参数为待转换的数据，第二个参数为子数据的id，第三个参数为子数据的pid，第四个参数为转换后子数据的字段名 &emsp;&emsp;总结：会用不是主要的，关键是要掌握其中的原理，一边根据自己的需求来进行改造，以上是在实际项目中遇到过的，在此记录下来，以后还会持续更新","tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}]}]